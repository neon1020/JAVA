package ref_casting;

public class Ex1 {

	public static void main(String[] args) {
		/*
		 * 레퍼런스 형변환
		 * - 참조형(레퍼런스타입) 끼리의 형변환 (상속 관계에서만 사용 가능)
		 * - 참조형 변수를 사용하여 다른 타입의 인스턴스(객체)를 참조하기 위해 변환하는 것
		 * - 업캐스팅(Up casting)과 다운캐스팅(Down casting)으로 분류됨
		 * 
		 * 1. 업캐스팅(Up casting)
		 * - 슈퍼클래스의 레퍼런스가 서브클래스의 인스턴스를 참조하는 것
		 *   = 서브클래스의 인스턴스를 슈퍼클래스 타입으로 변환하는 것
		 * - 묵시적 형변환(자동 형변환)이 일어남
		 * - 참조 가능 영역에 대한 축소 발생  
		 *   => 슈퍼클래스로부터 상속된 멤버만 접근 가능하고, 서브클래스의 멤버는 접근 불가
		 * - 일반적인 클래스간의 형변환은 대부분은 업캐스팅을 의미함  
		 * - 업캐스팅을 통해 다형성(Polymorphism) 실현 가능
		 * 
		 * 2. 다운캐스팅(Down casting)
		 * - 서브클래스의 레퍼런스가 슈퍼클래스의 인스턴스를 참조하는 것 (가리키는 것)
		 *   = 슈퍼클래스의 인스턴스를 서브클래스 타입으로 변환하는 것
		 * - 참조 가능한 영역에 대한 확대 발생
		 * - 자동 형변환이 일어나지 않으므로, 명시적(강제) 형변환이 필수!  
		 *   => 즉, 형변환 연산자를 통해 좌변(서브클래스)의 데이터타입을 명시해야한다!
		 * - 명시적 형변환을 통해 문법적(구문)오류가 해결되더라도
		 *   실제 실행 시점에서 오류가 발생할 수도 있음
		 *   => 참조 가능 영역의 확대로 인해 존재하지 않는 영역에 대한 참조 위험 때문  
		 * */
		
		
		// 1. 참조 데이터타입에서의 자동(묵시적) 형변환 = 업캐스팅(Up casting)
		
		// Child 타입 참조변수로 접근 가능한 메소드 : 2개
		Child c = new Child();
		c.parentPrn();
		c.childPrn();
		
		System.out.println("-----------------------------------");
		
		// 슈퍼클래스 타입 레퍼런스 변수 선언
		Parent p;
		p = c; // c의 주소 전달 => 자동 형변환!
		
		// Parent 타입 참조변수로 접근 가능한 메소드 : 1개
		p.parentPrn();
//		p.childPrn(); 사용할 수 없음!
		
		// --------------------------------------------------------------------------
		
		// 2. 참조 데이터타입에서의 강제(명시적) 형변환 = 다운캐스팅(Down casting)
		
		// 자동 업캐스팅이 일어남
		Parent p2 = new Child();
		// Parent 타입 참조변수로 접근 가능한 메소드 : 1개
		p2.parentPrn();
		
		// Child 타입 레퍼런스 변수 선언 후 다운캐스팅
		// 업캐스팅 된 변수에 대해서만 다운캐스팅 가능!!
		Child c2;
		c2 = (Child)p2;
		
		// Child 타입 참조변수로 접근 가능한 메소드 : 2개
		c2.parentPrn();
		c2.childPrn();
	}

}


class Parent {
	public void parentPrn() {
		System.out.println("슈퍼클래스의 parentPrn");
	}
}


class Child extends Parent {
	public void childPrn() {
		System.out.println("서브클래스의 childPrn");
	}
}